{"version":3,"sources":["webpack:///./src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.html","webpack:///./src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.scss","webpack:///./src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.ts","webpack:///./src/app/main/apps/mail-ngrx/i18n/en.ts","webpack:///./src/app/main/apps/mail-ngrx/i18n/tr.ts","webpack:///./src/app/main/apps/mail-ngrx/mail-details/mail-details.component.html","webpack:///./src/app/main/apps/mail-ngrx/mail-details/mail-details.component.scss","webpack:///./src/app/main/apps/mail-ngrx/mail-details/mail-details.component.ts","webpack:///./src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.html","webpack:///./src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.scss","webpack:///./src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.ts","webpack:///./src/app/main/apps/mail-ngrx/mail-list/mail-list.component.html","webpack:///./src/app/main/apps/mail-ngrx/mail-list/mail-list.component.scss","webpack:///./src/app/main/apps/mail-ngrx/mail-list/mail-list.component.ts","webpack:///./src/app/main/apps/mail-ngrx/mail.component.html","webpack:///./src/app/main/apps/mail-ngrx/mail.component.scss","webpack:///./src/app/main/apps/mail-ngrx/mail.component.ts","webpack:///./src/app/main/apps/mail-ngrx/mail.model.ts","webpack:///./src/app/main/apps/mail-ngrx/mail.module.ts","webpack:///./src/app/main/apps/mail-ngrx/mail.service.ts","webpack:///./src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.html","webpack:///./src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.scss","webpack:///./src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.ts","webpack:///./src/app/main/apps/mail-ngrx/store/actions/filters.actions.ts","webpack:///./src/app/main/apps/mail-ngrx/store/actions/folders.actions.ts","webpack:///./src/app/main/apps/mail-ngrx/store/actions/index.ts","webpack:///./src/app/main/apps/mail-ngrx/store/actions/labels.actions.ts","webpack:///./src/app/main/apps/mail-ngrx/store/actions/mails.actions.ts","webpack:///./src/app/main/apps/mail-ngrx/store/effects/filters.effects.ts","webpack:///./src/app/main/apps/mail-ngrx/store/effects/folders.effects.ts","webpack:///./src/app/main/apps/mail-ngrx/store/effects/index.ts","webpack:///./src/app/main/apps/mail-ngrx/store/effects/labels.effects.ts","webpack:///./src/app/main/apps/mail-ngrx/store/effects/mails.effects.ts","webpack:///./src/app/main/apps/mail-ngrx/store/guards/index.ts","webpack:///./src/app/main/apps/mail-ngrx/store/guards/resolve.guard.ts","webpack:///./src/app/main/apps/mail-ngrx/store/index.ts","webpack:///./src/app/main/apps/mail-ngrx/store/reducers/filters.reducer.ts","webpack:///./src/app/main/apps/mail-ngrx/store/reducers/folders.reducer.ts","webpack:///./src/app/main/apps/mail-ngrx/store/reducers/index.ts","webpack:///./src/app/main/apps/mail-ngrx/store/reducers/labels.reducer.ts","webpack:///./src/app/main/apps/mail-ngrx/store/reducers/mails.reducer.ts","webpack:///./src/app/main/apps/mail-ngrx/store/selectors/filters.selectors.ts","webpack:///./src/app/main/apps/mail-ngrx/store/selectors/folders.selectors.ts","webpack:///./src/app/main/apps/mail-ngrx/store/selectors/index.ts","webpack:///./src/app/main/apps/mail-ngrx/store/selectors/labels.selectors.ts","webpack:///./src/app/main/apps/mail-ngrx/store/selectors/mails.selectors.ts","webpack:///./src/app/main/apps/mail-ngrx/store/store.module.ts"],"names":[],"mappings":"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","file":"mail-ngrx-mail-module.js","sourcesContent":["module.exports = \"<div class=\\\"dialog-content-wrapper\\\">\\n    <mat-toolbar class=\\\"mat-accent m-0\\\">\\n        <mat-toolbar-row fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n            <span class=\\\"title dialog-title\\\">New Message</span>\\n            <button mat-icon-button (click)=\\\"matDialogRef.close()\\\" aria-label=\\\"Close dialog\\\">\\n                <mat-icon>close</mat-icon>\\n            </button>\\n        </mat-toolbar-row>\\n    </mat-toolbar>\\n\\n    <div mat-dialog-content class=\\\"p-24 m-0\\\" fusePerfectScrollbar>\\n\\n        <form name=\\\"composeForm\\\" [formGroup]=\\\"composeForm\\\" class=\\\"compose-form\\\" fxLayout=\\\"column\\\" fxFlex>\\n\\n            <mat-form-field>\\n                <input matInput name=\\\"from\\\"\\n                       placeholder=\\\"From\\\"\\n                       formControlName=\\\"from\\\"\\n                       type=\\\"email\\\">\\n            </mat-form-field>\\n\\n            <mat-form-field>\\n                <input matInput name=\\\"to\\\"\\n                       placeholder=\\\"To\\\"\\n                       formControlName=\\\"to\\\"\\n                       type=\\\"email\\\" required>\\n            </mat-form-field>\\n\\n            <mat-form-field>\\n                <input matInput\\n                       name=\\\"cc\\\"\\n                       placeholder=\\\"Cc\\\"\\n                       formControlName=\\\"cc\\\"\\n                       type=\\\"email\\\">\\n            </mat-form-field>\\n\\n            <mat-form-field>\\n                <input matInput\\n                       name=\\\"bcc\\\"\\n                       placeholder=\\\"Bcc\\\"\\n                       formControlName=\\\"bcc\\\"\\n                       type=\\\"email\\\">\\n            </mat-form-field>\\n\\n            <mat-form-field>\\n                <input matInput name=\\\"subject\\\"\\n                       placeholder=\\\"Subject\\\"\\n                       formControlName=\\\"subject\\\">\\n            </mat-form-field>\\n\\n            <mat-form-field>\\n            <textarea matInput name=\\\"message\\\"\\n                      placeholder=\\\"Message\\\"\\n                      formControlName=\\\"message\\\"\\n                      rows=\\\"6\\\">\\n            </textarea>\\n            </mat-form-field>\\n\\n            <div class=\\\"attachment-list\\\">\\n\\n                <div class=\\\"attachment\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n                    <div>\\n                        <span class=\\\"filename\\\">attachment-2.doc</span>\\n                        <span class=\\\"size\\\">(12 Kb)</span>\\n                    </div>\\n\\n                    <button mat-icon-button aria-label=\\\"Delete attachment\\\">\\n                        <mat-icon class=\\\"s-16\\\">close</mat-icon>\\n                    </button>\\n                </div>\\n\\n                <div class=\\\"attachment\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n                    <div>\\n                        <span class=\\\"filename\\\">attachment-1.jpg</span>\\n                        <span class=\\\"size\\\">(350 Kb)</span>\\n                    </div>\\n\\n                    <button mat-icon-button aria-label=\\\"Delete attachment\\\">\\n                        <mat-icon class=\\\"s-16\\\">close</mat-icon>\\n                    </button>\\n                </div>\\n            </div>\\n        </form>\\n    </div>\\n\\n    <div mat-dialog-actions class=\\\"m-0 p-16\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n        <div>\\n            <button mat-raised-button\\n                    (click)=\\\"matDialogRef.close(['send',composeForm])\\\"\\n                    class=\\\"save-button mat-accent\\\"\\n                    [disabled]=\\\"composeForm.invalid\\\"\\n                    aria-label=\\\"SAVE\\\">\\n                SEND\\n            </button>\\n\\n            <button mat-icon-button matTooltip=\\\"Attach a file\\\">\\n                <mat-icon>attach_file</mat-icon>\\n            </button>\\n        </div>\\n\\n        <button mat-icon-button (click)=\\\"matDialogRef.close(['delete',composeForm])\\\" aria-label=\\\"Delete\\\"\\n                matTooltip=\\\"Delete\\\">\\n            <mat-icon>delete</mat-icon>\\n        </button>\\n    </div>\\n</div>\\n\"","module.exports = \".mail-ngrx-compose-dialog .mat-dialog-container {\\n  padding: 0;\\n  width: 720px; }\\n  .mail-ngrx-compose-dialog .mat-dialog-container .compose-form .mat-form-field {\\n    width: 100%; }\\n  .mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list {\\n    font-size: 13px;\\n    padding-top: 16px; }\\n  .mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list .attachment {\\n      background-color: rgba(0, 0, 0, 0.08);\\n      border: 1px solid rgba(0, 0, 0, 0.16);\\n      padding-left: 16px;\\n      margin-top: 8px;\\n      border-radius: 2px; }\\n  .mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list .attachment .filename {\\n        font-weight: 500; }\\n  .mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list .attachment:last-child {\\n        margin-bottom: 0; }\\n  .mail-ngrx-compose-dialog .dialog-content-wrapper {\\n  max-height: 85vh;\\n  display: flex;\\n  flex-direction: column; }\\n\"","import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\n@Component({\n    selector     : 'mail-ngrx-compose',\n    templateUrl  : './compose.component.html',\n    styleUrls    : ['./compose.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MailNgrxComposeDialogComponent\n{\n    composeForm: FormGroup;\n\n    /**\n     * Constructor\n     *\n     * @param {MatDialogRef<MailNgrxComposeDialogComponent>} matDialogRef\n     * @param _data\n     * @param {FormBuilder} _formBuilder\n     */\n    constructor(\n        public matDialogRef: MatDialogRef<MailNgrxComposeDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: any,\n        private _formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.composeForm = this.createComposeForm();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Create compose form\n     *\n     * @returns {FormGroup}\n     */\n    createComposeForm(): FormGroup\n    {\n        return this._formBuilder.group({\n            from   : {\n                value   : ['johndoe@creapond.com'],\n                disabled: [true]\n            },\n            to     : [''],\n            cc     : [''],\n            bcc    : [''],\n            subject: [''],\n            message: ['']\n        });\n\n    }\n\n}\n","export const locale = {\n    lang: 'en',\n    data: {\n        'MAIL': {\n            'COMPOSE'                 : 'COMPOSE',\n            'FOLDERS'                 : 'FOLDERS',\n            'FILTERS'                 : 'FILTERS',\n            'LABELS'                  : 'LABELS',\n            'NO_MESSAGES'             : 'There are no messages!',\n            'SELECT_A_MESSAGE_TO_READ': 'Select a message to read',\n            'SEARCH_PLACEHOLDER': 'Search for an e-mail or contact'\n        }\n    }\n};\n","export const locale = {\n    lang: 'tr',\n    data: {\n        'MAIL': {\n            'COMPOSE'                 : 'YENİ E-POSTA',\n            'FOLDERS'                 : 'KLASÖRLER',\n            'FILTERS'                 : 'FİLTRELER',\n            'LABELS'                  : 'ETİKETLER',\n            'NO_MESSAGES'             : 'Mesajiniz bulunmamakta!',\n            'SELECT_A_MESSAGE_TO_READ': 'Okumak için bir mesaj seçin',\n            'SEARCH_PLACEHOLDER'      : 'E-mail yada bir kişi arayın'\n        }\n    }\n};\n","module.exports = \"<div *ngIf=\\\"!mail\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" fxFlex>\\n    <mat-icon class=\\\"s-128 mb-16 select-message-icon hint-text\\\">\\n        email\\n    </mat-icon>\\n    <span class=\\\"select-message-text hint-text\\\">\\n        <span>{{ 'MAIL.SELECT_A_MESSAGE_TO_READ' | translate }}</span>\\n    </span>\\n</div>\\n\\n<div *ngIf=\\\"mail\\\">\\n\\n    <div class=\\\"mail-header\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n\\n        <div>\\n            <div class=\\\"subject\\\" flex>{{mail.subject}}</div>\\n\\n            <div class=\\\"labels\\\" fxLayout=\\\"row wrap\\\">\\n                <div class=\\\"label\\\" *ngFor=\\\"let labelId of mail.labels\\\"\\n                     fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n                    <div class=\\\"label-color\\\" [ngStyle]=\\\"{'background-color': (labels$ | async) | getById:labelId:'color'}\\\"></div>\\n                    <div class=\\\"label-title\\\">{{(labels$ | async) | getById:labelId:'title'}}</div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"actions\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n            <button mat-icon-button (click)=\\\"toggleStar($event)\\\" aria-label=\\\"Toggle star\\\">\\n                <mat-icon class=\\\"amber-fg\\\" *ngIf=\\\"mail.starred\\\">star</mat-icon>\\n                <mat-icon class=\\\"secondary-text\\\" *ngIf=\\\"!mail.starred\\\">star_outline</mat-icon>\\n            </button>\\n\\n            <button mat-icon-button (click)=\\\"toggleImportant($event)\\\" aria-label=\\\"Toggle important\\\">\\n                <mat-icon class=\\\"red-fg\\\" *ngIf=\\\"mail.important\\\">label</mat-icon>\\n                <mat-icon class=\\\"secondary-text\\\" *ngIf=\\\"!mail.important\\\">label_outline</mat-icon>\\n            </button>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"mail-content\\\">\\n\\n        <div class=\\\"info\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between start\\\">\\n\\n            <div fxFlex fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start start\\\">\\n\\n                <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n\\n                    <div>\\n                        <img *ngIf=\\\"mail.from.avatar\\\" alt=\\\"{{mail.from.name}}\\\"\\n                             src=\\\"{{mail.from.avatar}}\\\" class=\\\"avatar\\\"/>\\n\\n                        <div *ngIf=\\\"!mail.from.avatar\\\" class=\\\"avatar\\\" ms-random-class=\\\"vm.colors\\\">\\n                            {{mail.from.name[0]}}\\n                        </div>\\n                    </div>\\n\\n                    <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start start\\\">\\n\\n                        <div class=\\\"name\\\">\\n                            {{mail.from.name}}\\n                        </div>\\n\\n                        <div class=\\\"to\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n                            <div class=\\\"to-text\\\">to</div>\\n                            <div>{{mail.to[0].name}}</div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <a class=\\\"toggle-details\\\" (click)=\\\"showDetails = !showDetails\\\">\\n                    <span *ngIf=\\\"!showDetails\\\">Show Details</span>\\n                    <span *ngIf=\\\"showDetails\\\">Hide Details</span>\\n                </a>\\n\\n                <div *ngIf=\\\"showDetails\\\" class=\\\"details\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\n\\n                    <div fxLayout=\\\"column\\\">\\n                        <span class=\\\"title\\\">From:</span>\\n                        <span class=\\\"title\\\">To:</span>\\n                        <span class=\\\"title\\\">Date:</span>\\n                    </div>\\n\\n                    <div fxLayout=\\\"column\\\">\\n                        <span class=\\\"detail\\\">{{mail.from.email}}</span>\\n                        <span class=\\\"detail\\\">{{mail.to[0].email}}</span>\\n                        <span class=\\\"detail\\\">{{mail.time}}</span>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <button mat-icon-button [matMenuTriggerFor]=\\\"moreMenu\\\" aria-label=\\\"More\\\" (click)=\\\"$event.stopPropagation()\\\">\\n                <mat-icon>more_vert</mat-icon>\\n            </button>\\n\\n            <mat-menu #moreMenu=\\\"matMenu\\\">\\n                <button mat-menu-item aria-label=\\\"Reply\\\">\\n                    <mat-icon>reply</mat-icon>\\n                    <span>Reply</span>\\n                </button>\\n\\n                <button mat-menu-item aria-label=\\\"Forward\\\">\\n                    <mat-icon>forward</mat-icon>\\n                    <span>Forward</span>\\n                </button>\\n\\n                <button mat-menu-item aria-label=\\\"Print\\\">\\n                    <mat-icon>print</mat-icon>\\n                    <span>Print</span>\\n                </button>\\n            </mat-menu>\\n        </div>\\n\\n        <div [innerHTML]=\\\"mail.message\\\"></div>\\n\\n    </div>\\n\\n    <div *ngIf=\\\"mail.attachments\\\" class=\\\"mail-attachments\\\">\\n\\n        <div class=\\\"title\\\">\\n            <span>Attachments</span>\\n            ({{mail.attachments.length}})\\n        </div>\\n\\n        <div class=\\\"attachment-list\\\" fxLayout=\\\"row wrap\\\">\\n\\n            <div class=\\\"attachment\\\" fxLayout=\\\"column\\\"\\n                 *ngFor=\\\"let attachment of mail.attachments\\\">\\n\\n                <img class=\\\"preview\\\" src=\\\"{{attachment.preview}}\\\">\\n\\n                <div fxLayout=\\\"column\\\">\\n                    <a href=\\\"#\\\" onclick=\\\"event.preventDefault()\\\">View</a>\\n                    <a href=\\\"#\\\" onclick=\\\"event.preventDefault()\\\">Download</a>\\n                    <div class=\\\"size\\\">({{attachment.size}})</div>\\n                </div>\\n\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \"/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n * @param target Which kind of high contrast setting to target. Defaults to `active`, can be\\n *    `white-on-black` or `black-on-white`.\\n */\\n/* Theme for the ripple elements.*/\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\nmail-ngrx-details {\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1;\\n  padding: 24px;\\n  overflow-y: auto;\\n  -webkit-overflow-scrolling: touch; }\\nmail-ngrx-details .select-message-text {\\n    font-size: 24px;\\n    font-weight: 300; }\\nmail-ngrx-details .mail-header {\\n    padding-bottom: 16px;\\n    border-bottom: 1px solid; }\\nmail-ngrx-details .mail-header .actions {\\n      min-width: 88px; }\\nmail-ngrx-details .mail-header .subject {\\n      font-size: 17px;\\n      font-weight: 500; }\\nmail-ngrx-details .mail-header .label {\\n      font-size: 11px;\\n      border-radius: 2px;\\n      margin: 4px 4px 4px 0;\\n      padding: 3px 8px; }\\nmail-ngrx-details .mail-header .label .label-color {\\n        width: 8px;\\n        height: 8px;\\n        margin-right: 8px;\\n        border-radius: 50%; }\\nmail-ngrx-details .mail-content {\\n    padding: 24px 0; }\\nmail-ngrx-details .mail-content .to .to-text {\\n      margin-right: 4px;\\n      text-transform: lowercase; }\\nmail-ngrx-details .mail-content .info {\\n      padding-bottom: 16px; }\\nmail-ngrx-details .mail-content .info .avatar {\\n        margin-right: 16px; }\\nmail-ngrx-details .mail-content .info .name {\\n        margin-right: 8px;\\n        font-weight: 500; }\\nmail-ngrx-details .mail-content .info .toggle-details {\\n        -webkit-user-select: none;\\n           -moz-user-select: none;\\n            -ms-user-select: none;\\n                user-select: none;\\n        text-decoration: underline;\\n        padding-top: 16px;\\n        cursor: pointer;\\n        font-weight: 500; }\\nmail-ngrx-details .mail-content .info .details {\\n        padding-top: 8px; }\\nmail-ngrx-details .mail-content .info .details .title {\\n          font-weight: 500;\\n          margin-right: 6px; }\\nmail-ngrx-details .mail-attachments {\\n    padding: 24px 0;\\n    border-top: 1px solid; }\\nmail-ngrx-details .mail-attachments .title {\\n      margin-bottom: 16px;\\n      font-weight: 500; }\\nmail-ngrx-details .mail-attachments .attachment .preview {\\n      width: 100px;\\n      margin: 0 16px 8px 0; }\\nmail-ngrx-details .mail-attachments .attachment .link {\\n      margin-bottom: 2px; }\\nmail-ngrx-details .mail-attachments .attachment .size {\\n      font-size: 11px; }\\n\"","import { ChangeDetectionStrategy, Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Component({\n    selector       : 'mail-ngrx-details',\n    templateUrl    : './mail-details.component.html',\n    styleUrls      : ['./mail-details.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxDetailsComponent implements OnChanges\n{\n    @Input()\n    currentMail: Mail;\n\n    labels$: Observable<any>;\n    mail: Mail;\n    showDetails: boolean;\n\n    /**\n     * Constructor\n     *\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.showDetails = false;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On changes\n     */\n    ngOnChanges(): void\n    {\n        this.updateModel(this.currentMail);\n        this.markAsRead();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Mark as read\n     */\n    markAsRead(): void\n    {\n        if ( this.mail && !this.mail.read )\n        {\n            this.mail.markRead();\n            this.updateMail();\n        }\n    }\n\n    /**\n     * Toggle star\n     *\n     * @param event\n     */\n    toggleStar(event): void\n    {\n        event.stopPropagation();\n        this.mail.toggleStar();\n        this.updateMail();\n    }\n\n    /**\n     * Toggle important\n     *\n     * @param event\n     */\n    toggleImportant(event): void\n    {\n        event.stopPropagation();\n        this.mail.toggleImportant();\n        this.updateMail();\n    }\n\n    /**\n     * Update model\n     *\n     * @param data\n     */\n    updateModel(data): void\n    {\n        this.mail = !data ? null : new Mail({...data});\n    }\n\n    /**\n     * Update the mail\n     */\n    updateMail(): void\n    {\n        this._store.dispatch(new fromStore.UpdateMail(this.mail));\n        this.updateModel(this.mail);\n    }\n}\n","module.exports = \"<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n\\n    <mat-checkbox [checked]=\\\"selected\\\" (change)=\\\"onSelectedChange()\\\"\\n                  (click)=\\\"$event.stopPropagation();\\\">\\n    </mat-checkbox>\\n\\n    <div class=\\\"info\\\" fxFlex FlexLayout=\\\"column\\\">\\n\\n        <div class=\\\"row-1\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n\\n            <div class=\\\"name\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxFlex>\\n                <img class=\\\"avatar\\\" *ngIf=\\\"mail.from?.avatar\\\" alt=\\\"{{mail.from?.name}}\\\" src=\\\"{{mail.from?.avatar}}\\\"/>\\n                <div class=\\\"avatar accent\\\" *ngIf=\\\"!mail.from?.avatar\\\">{{mail.from?.name[0]}}</div>\\n                <span class=\\\"text-truncate\\\" *ngIf=\\\"mail?.from\\\">{{mail.from?.name}}</span>\\n                <mat-icon *ngIf=\\\"mail.hasAttachments\\\">attachment</mat-icon>\\n            </div>\\n\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n                <div class=\\\"time\\\">{{mail.time}}</div>\\n            </div>\\n\\n        </div>\\n\\n        <div class=\\\"row-2\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n\\n            <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start start\\\">\\n\\n                <div class=\\\"subject text-truncate\\\">\\n                    {{mail.subject}}\\n                </div>\\n\\n                <div class=\\\"message text-truncate\\\" *ngIf=\\\"mail?.message\\\">\\n                    {{mail.message | htmlToPlaintext | slice:0:180}}{{mail.message.length > 180 ? '...' : ''}}\\n                </div>\\n\\n                <div class=\\\"labels\\\" fxLayout=\\\"row wrap\\\" fxHide fxShow.gt-sm>\\n                    <div class=\\\"label\\\" *ngFor=\\\"let labelId of mail.labels\\\"\\n                         fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n                        <div class=\\\"label-color\\\"\\n                             [ngStyle]=\\\"{'background-color': (labels$ | async) | getById:labelId:'color'}\\\"></div>\\n                        <div class=\\\"label-title\\\">{{(labels$ | async) | getById:labelId:'title'}}</div>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \"/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n * @param target Which kind of high contrast setting to target. Defaults to `active`, can be\\n *    `white-on-black` or `black-on-white`.\\n */\\n/* Theme for the ripple elements.*/\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\nmail-ngrx-list-item {\\n  flex-shrink: 0;\\n  position: relative;\\n  padding: 16px 24px;\\n  border-bottom: 1px solid;\\n  cursor: pointer; }\\nmail-ngrx-list-item.unread .info .name {\\n    font-weight: 700; }\\nmail-ngrx-list-item.unread .info .row-2 .subject {\\n    font-weight: 700; }\\nmail-ngrx-list-item .info {\\n    overflow: hidden;\\n    width: 0;\\n    margin-left: 16px;\\n    position: relative; }\\nmail-ngrx-list-item .info .row-1 {\\n      margin-bottom: 8px; }\\nmail-ngrx-list-item .info .row-1 .name {\\n        font-size: 15px;\\n        font-weight: 500; }\\nmail-ngrx-list-item .info .row-1 .name .avatar {\\n          min-width: 32px;\\n          width: 32px;\\n          height: 32px;\\n          line-height: 32px; }\\nmail-ngrx-list-item .info .row-1 .actions {\\n        margin-left: 4px; }\\nmail-ngrx-list-item .info .row-1 .actions .mat-icon-button {\\n          width: 32px;\\n          height: 32px;\\n          line-height: 1; }\\nmail-ngrx-list-item .info .row-2 .subject,\\n    mail-ngrx-list-item .info .row-2 .message {\\n      width: 100%; }\\nmail-ngrx-list-item .info .row-2 .message {\\n      position: relative; }\\nmail-ngrx-list-item .info .row-2 .labels {\\n      margin-top: 8px; }\\nmail-ngrx-list-item .info .row-2 .labels .label {\\n        font-size: 11px;\\n        border-radius: 2px;\\n        margin: 0 4px 0 0;\\n        padding: 3px 8px; }\\nmail-ngrx-list-item .info .row-2 .labels .label .label-color {\\n          width: 8px;\\n          height: 8px;\\n          margin-right: 8px;\\n          border-radius: 50%; }\\n\"","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { MailNgrxService } from '../../mail.service';\nimport { Mail } from '../../mail.model';\nimport * as fromStore from '../../store';\n\n@Component({\n    selector       : 'mail-ngrx-list-item',\n    templateUrl    : './mail-list-item.component.html',\n    styleUrls      : ['./mail-list-item.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxListItemComponent implements OnInit\n{\n    @Input() mail: Mail;\n    @HostBinding('class.selected') selected: boolean;\n    @HostBinding('class.unread') unread: boolean;\n    labels$: Observable<any>;\n    selectedMailIds$: Observable<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChangeDetectorRef} _changeDetectorRef\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store} _store\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\n        this.selected = false;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    ngOnInit(): void\n    {\n        // Set the initial values\n        this.mail = new Mail(this.mail);\n        this.unread = !this.mail.read;\n\n        this.selectedMailIds$.subscribe((selectedMailIds) => {\n            this.selected = selectedMailIds.length > 0 && selectedMailIds.find(id => id === this.mail.id) !== undefined;\n            this.refresh();\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    refresh(): void\n    {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onSelectedChange(): void\n    {\n        this._store.dispatch(new fromStore.ToggleInSelectedMails(this.mail.id));\n    }\n}\n","module.exports = \"<div *ngIf=\\\"mails.length === 0\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" fxFlexFill>\\n    <span class=\\\"no-messages-text hint-text\\\">{{ 'MAIL.NO_MESSAGES' | translate }}</span>\\n</div>\\n\\n<div class=\\\"mail-list\\\">\\n    <mail-ngrx-list-item matRipple *ngFor=\\\"let mail of mails\\\" [mail]=\\\"mail\\\" (click)=\\\"readMail(mail.id)\\\"\\n                    [ngClass]=\\\"{'current-mail':mail?.id == currentMail?.id}\\\">\\n    </mail-ngrx-list-item>\\n</div>\\n\"","module.exports = \"mail-ngrx-list {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  flex: 1;\\n  padding: 0;\\n  border-right: 1px solid;\\n  overflow-y: auto;\\n  -webkit-overflow-scrolling: touch; }\\n  mail-ngrx-list .no-messages-text {\\n    font-size: 24px;\\n    font-weight: 300; }\\n  mail-ngrx-list .mail-list {\\n    position: relative;\\n    display: flex;\\n    flex-direction: column;\\n    flex: 1; }\\n\"","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Component({\n    selector       : 'mail-ngrx-list',\n    templateUrl    : './mail-list.component.html',\n    styleUrls      : ['./mail-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxListComponent\n{\n    @Input()\n    mails: Mail[];\n\n    @Input()\n    currentMail: Mail[];\n\n    /**\n     * Constructor\n     *\n     * @param {ActivatedRoute} _activatedRoute\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Router} _router\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _mailNgrxService: MailNgrxService,\n        private _router: Router\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Read mail\n     *\n     * @param mailId\n     */\n    readMail(mailId): void\n    {\n        const labelHandle  = this._activatedRoute.snapshot.params.labelHandle,\n              filterHandle = this._activatedRoute.snapshot.params.filterHandle,\n              folderHandle = this._activatedRoute.snapshot.params.folderHandle;\n\n        if ( labelHandle )\n        {\n            this._router.navigate(['apps/mail-ngrx/label/' + labelHandle + '/' + mailId]);\n        }\n        else if ( filterHandle )\n        {\n            this._router.navigate(['apps/mail-ngrx/filter/' + filterHandle + '/' + mailId]);\n        }\n        else\n        {\n            this._router.navigate(['apps/mail-ngrx/' + folderHandle + '/' + mailId]);\n        }\n    }\n}\n","module.exports = \"<div id=\\\"mail\\\" class=\\\"page-layout carded left-sidebar inner-scroll\\\">\\n\\n    <!-- TOP BACKGROUND -->\\n    <div class=\\\"top-bg accent\\\"></div>\\n    <!-- / TOP BACKGROUND -->\\n\\n    <!-- SIDEBAR -->\\n    <fuse-sidebar class=\\\"sidebar\\\" name=\\\"mail-ngrx-main-sidebar\\\" position=\\\"left\\\" lockedOpen=\\\"gt-md\\\">\\n        <mail-ngrx-main-sidebar></mail-ngrx-main-sidebar>\\n    </fuse-sidebar>\\n    <!-- / SIDEBAR -->\\n\\n    <!-- CENTER -->\\n    <div class=\\\"center\\\">\\n\\n        <!-- CONTENT HEADER -->\\n        <div class=\\\"header\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n\\n            <div class=\\\"search-wrapper\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n\\n                <button mat-icon-button class=\\\"sidebar-toggle\\\" fxHide.gt-md\\n                        (click)=\\\"toggleSidebar('mail-ngrx-main-sidebar')\\\">\\n                    <mat-icon>menu</mat-icon>\\n                </button>\\n\\n                <div class=\\\"search\\\" flex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n                    <mat-icon>search</mat-icon>\\n                    <input [formControl]=\\\"searchInput\\\" [placeholder]=\\\"'MAIL.SEARCH_PLACEHOLDER' | translate\\\" fxFlex>\\n                </div>\\n            </div>\\n        </div>\\n        <!-- / CONTENT HEADER -->\\n\\n        <!-- CONTENT CARD -->\\n        <div class=\\\"content-card\\\" [ngClass]=\\\"{'current-mail-selected':currentMail$ | async}\\\">\\n\\n            <!-- CONTENT TOOLBAR -->\\n            <div class=\\\"toolbar px-24 py-8\\\">\\n\\n                <div class=\\\"mail-selection\\\" fxFlex=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n\\n                    <mat-checkbox (click)=\\\"toggleSelectAll($event)\\\"\\n                                  [checked]=\\\"hasSelectedMails\\\"\\n                                  [indeterminate]=\\\"isIndeterminate\\\">\\n                    </mat-checkbox>\\n\\n                    <button mat-icon-button [matMenuTriggerFor]=\\\"selectMenu\\\">\\n                        <mat-icon>arrow_drop_down</mat-icon>\\n                    </button>\\n                    <mat-menu #selectMenu=\\\"matMenu\\\">\\n                        <button mat-menu-item (click)=\\\"selectAllMails()\\\">All</button>\\n                        <button mat-menu-item (click)=\\\"deselectAllMails()\\\">None</button>\\n                        <button mat-menu-item (click)=\\\"selectMailsByParameter('read', true)\\\">Read</button>\\n                        <button mat-menu-item (click)=\\\"selectMailsByParameter('read', false)\\\">Unread</button>\\n                        <button mat-menu-item (click)=\\\"selectMailsByParameter('starred', true)\\\">Starred</button>\\n                        <button mat-menu-item (click)=\\\"selectMailsByParameter('starred', false)\\\">Unstarred</button>\\n                        <button mat-menu-item (click)=\\\"selectMailsByParameter('important', true)\\\">Important</button>\\n                        <button mat-menu-item (click)=\\\"selectMailsByParameter('important', false)\\\">Unimportant</button>\\n                    </mat-menu>\\n\\n                    <div class=\\\"toolbar-separator\\\" *ngIf=\\\"hasSelectedMails\\\"></div>\\n\\n                    <button mat-icon-button (click)=\\\"setFolderOnSelectedMails(4)\\\" *ngIf=\\\"hasSelectedMails\\\">\\n                        <mat-icon class=\\\"secondary-text\\\">delete</mat-icon>\\n                    </button>\\n\\n                    <button mat-icon-button [matMenuTriggerFor]=\\\"folderMenu\\\" *ngIf=\\\"hasSelectedMails\\\">\\n                        <mat-icon class=\\\"secondary-text\\\">folder</mat-icon>\\n                    </button>\\n                    <mat-menu #folderMenu=\\\"matMenu\\\">\\n                        <button mat-menu-item *ngFor=\\\"let folder of folders$ | async\\\"\\n                                (click)=\\\"setFolderOnSelectedMails(folder.id)\\\">{{folder.title}}\\n                        </button>\\n                    </mat-menu>\\n\\n                    <button mat-icon-button [matMenuTriggerFor]=\\\"labelMenu\\\" *ngIf=\\\"hasSelectedMails\\\">\\n                        <mat-icon class=\\\"secondary-text\\\">label</mat-icon>\\n                    </button>\\n                    <mat-menu #labelMenu=\\\"matMenu\\\">\\n                        <button mat-menu-item *ngFor=\\\"let label of labels$ | async\\\"\\n                                (click)=\\\"toggleLabelOnSelectedMails(label.id)\\\">{{label.title}}\\n                        </button>\\n                    </mat-menu>\\n                </div>\\n\\n                <div *ngIf=\\\"currentMail$ | async\\\" fxHide.gt-xs>\\n                    <button mat-icon-button (click)=\\\"deselectCurrentMail()\\\">\\n                        <mat-icon class=\\\"secondary-text\\\">arrow_back</mat-icon>\\n                    </button>\\n                </div>\\n            </div>\\n            <!-- / CONTENT TOOLBAR -->\\n\\n            <!-- CONTENT -->\\n            <div class=\\\"content\\\" fxLayout=\\\"row\\\">\\n\\n                <mail-ngrx-list fusePerfectScrollbar fxFlex [mails]=\\\"mails$ | async\\\" [currentMail]=\\\"currentMail$ | async\\\"></mail-ngrx-list>\\n                <mail-ngrx-details [currentMail]=\\\"currentMail$ | async\\\" fusePerfectScrollbar fxFlex></mail-ngrx-details>\\n\\n            </div>\\n            <!-- / CONTENT -->\\n\\n        </div>\\n        <!-- / CONTENT CARD -->\\n\\n    </div>\\n    <!-- / CENTER -->\\n\\n</div>\\n\"","module.exports = \"/**\\n * Applies styles for users in high contrast mode. Note that this only applies\\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\\n * attribute, however Chrome handles high contrast differently.\\n * @param target Which kind of high contrast setting to target. Defaults to `active`, can be\\n *    `white-on-black` or `black-on-white`.\\n */\\n/* Theme for the ripple elements.*/\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\nmail-ngrx {\\n  width: 100%; }\\nmail-ngrx .center .header .search-wrapper {\\n    box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12); }\\nmail-ngrx .center .header .search-wrapper .sidebar-toggle {\\n      margin: 0;\\n      width: 56px;\\n      height: 56px;\\n      border-radius: 0;\\n      border-right: 1px solid; }\\nmail-ngrx .center .header .search-wrapper .search {\\n      width: 100%;\\n      height: 56px;\\n      line-height: 56px;\\n      padding: 18px; }\\nmail-ngrx .center .header .search-wrapper .search input {\\n        height: 56px;\\n        padding-left: 16px;\\n        border: none;\\n        outline: none; }\\n@media screen and (max-width: 599px) {\\n    mail-ngrx .center .content-card mail-list {\\n      border-right: none; }\\n    mail-ngrx .center .content-card mail-list,\\n    mail-ngrx .center .content-card mail-details {\\n      flex: 1 0 100%; }\\n    mail-ngrx .center .content-card mail-details {\\n      display: none !important; }\\n    mail-ngrx .center .content-card.current-mail-selected .toolbar {\\n      padding-left: 16px !important; }\\n      mail-ngrx .center .content-card.current-mail-selected .toolbar .mail-selection {\\n        display: none !important; }\\n    mail-ngrx .center .content-card.current-mail-selected .content mail-list {\\n      display: none !important; }\\n    mail-ngrx .center .content-card.current-mail-selected .content mail-details {\\n      display: flex !important; } }\\n\"","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { FuseSidebarService } from '@fuse/components/sidebar/sidebar.service';\nimport { FuseTranslationLoaderService } from '@fuse/services/translation-loader.service';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\n\nimport { locale as english } from 'app/main/apps/mail-ngrx/i18n/en';\nimport { locale as turkish } from 'app/main/apps/mail-ngrx/i18n/tr';\n\n@Component({\n    selector       : 'mail-ngrx',\n    templateUrl    : './mail.component.html',\n    styleUrls      : ['./mail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxComponent implements OnInit, OnDestroy\n{\n    hasSelectedMails: boolean;\n    isIndeterminate: boolean;\n    searchInput: FormControl;\n    mails$: Observable<any>;\n    folders$: Observable<any>;\n    labels$: Observable<any>;\n    currentMail$: Observable<Mail>;\n    selectedMailIds$: Observable<string[]>;\n    searchText$: Observable<string>;\n    mails: Mail[];\n    selectedMailIds: string[];\n\n    /**\n     * Constructor\n     *\n     * @param {ChangeDetectorRef} _changeDetectorRef\n     * @param {FuseSidebarService} _fuseSidebarService\n     * @param {FuseTranslationLoaderService} _fuseTranslationLoaderService\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _fuseSidebarService: FuseSidebarService,\n        private _fuseTranslationLoaderService: FuseTranslationLoaderService,\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.searchInput = new FormControl('');\n        this._fuseTranslationLoaderService.loadTranslations(english, turkish);\n        this.currentMail$ = this._store.pipe(select(fromStore.getCurrentMail));\n        this.mails$ = this._store.pipe(select(fromStore.getMailsArr));\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\n        this.searchText$ = this._store.pipe(select(fromStore.getSearchText));\n        this.mails = [];\n        this.selectedMailIds = [];\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.mails$.subscribe(mails => {\n            this.mails = mails;\n        });\n\n        this.selectedMailIds$\n            .subscribe(selectedMailIds => {\n                this.selectedMailIds = selectedMailIds;\n                this.hasSelectedMails = selectedMailIds.length > 0;\n                this.isIndeterminate = (selectedMailIds.length !== this.mails.length && selectedMailIds.length > 0);\n                this.refresh();\n            });\n\n        this.searchText$.subscribe(searchText => {\n            this.searchInput.setValue(searchText);\n        });\n\n        this.searchInput.valueChanges.pipe(\n            debounceTime(300),\n            distinctUntilChanged()\n        ).subscribe(searchText => {\n            this._store.dispatch(new fromStore.SetSearchText(searchText));\n        });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        this._changeDetectorRef.detach();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Toggle select all\n     *\n     * @param ev\n     */\n    toggleSelectAll(ev): void\n    {\n        ev.preventDefault();\n\n        if ( this.selectedMailIds.length && this.selectedMailIds.length > 0 )\n        {\n            this.deselectAllMails();\n        }\n        else\n        {\n            this.selectAllMails();\n        }\n    }\n\n    /**\n     * Select all mails\n     */\n    selectAllMails(): void\n    {\n        this._store.dispatch(new fromStore.SelectAllMails());\n    }\n\n    /**\n     * Deselect all mails\n     */\n    deselectAllMails(): void\n    {\n        this._store.dispatch(new fromStore.DeselectAllMails());\n    }\n\n    /**\n     * Select mails by parameter\n     *\n     * @param parameter\n     * @param value\n     */\n    selectMailsByParameter(parameter, value): void\n    {\n        this._store.dispatch(new fromStore.SelectMailsByParameter({\n            parameter,\n            value\n        }));\n    }\n\n    /**\n     * Toggle label on selected mails\n     *\n     * @param labelId\n     */\n    toggleLabelOnSelectedMails(labelId): void\n    {\n        this._store.dispatch(new fromStore.AddLabelOnSelectedMails(labelId));\n    }\n\n    /**\n     * Set folder on selected mails\n     *\n     * @param folderId\n     */\n    setFolderOnSelectedMails(folderId): void\n    {\n        this._store.dispatch(new fromStore.SetFolderOnSelectedMails(folderId));\n    }\n\n    /**\n     * Deselect current mail\n     */\n    deselectCurrentMail(): void\n    {\n        this._store.dispatch(new fromStore.SetCurrentMail(''));\n    }\n\n    /**\n     * Refresh\n     */\n    refresh(): void\n    {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Toggle the sidebar\n     *\n     * @param name\n     */\n    toggleSidebar(name): void\n    {\n        this._fuseSidebarService.getSidebar(name).toggleOpen();\n    }\n}\n","export class Mail\n{\n    id: string;\n    from: {\n        name: string,\n        avatar: string,\n        email: string\n    };\n    to: {\n        name: string,\n        email: string\n    }[];\n    subject: string;\n    message: string;\n    time: string;\n    read: boolean;\n    starred: boolean;\n    important: boolean;\n    hasAttachments: boolean;\n    attachments: {\n        type: string,\n        fileName: string,\n        preview: string,\n        url: string,\n        size: string\n    }[];\n    labels: string[];\n    folder: string;\n\n    /**\n     * Constructor\n     *\n     * @param mail\n     */\n    constructor(mail)\n    {\n        this.id = mail.id;\n        this.from = mail.from;\n        this.to = mail.to;\n        this.subject = mail.subject;\n        this.message = mail.message;\n        this.time = mail.time;\n        this.read = mail.read;\n        this.starred = mail.starred;\n        this.important = mail.important;\n        this.hasAttachments = mail.hasAttachments;\n        this.attachments = mail.attachments;\n        this.labels = mail.labels;\n        this.folder = mail.folder;\n    }\n\n    /**\n     * Toggle star\n     */\n    toggleStar(): void\n    {\n        this.starred = !this.starred;\n    }\n\n    /**\n     * Toggle important\n     */\n    toggleImportant(): void\n    {\n        this.important = !this.important;\n    }\n\n    /**\n     * Mark as read\n     */\n    markRead(): void\n    {\n        this.read = true;\n    }\n\n    /**\n     * Mark as unread\n     */\n    markUnread(): void\n    {\n        this.read = false;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {\n    MatButtonModule, MatCheckboxModule, MatDialogModule, MatFormFieldModule, MatIconModule, MatInputModule, MatMenuModule, MatRippleModule, MatSelectModule, MatToolbarModule\n} from '@angular/material';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { FuseSidebarModule } from '@fuse/components';\n\nimport * as fromGuards from 'app/main/apps/mail-ngrx/store/guards/index';\nimport { MailNgrxStoreModule } from 'app/main/apps/mail-ngrx/store/store.module';\nimport { MailNgrxComponent } from 'app/main/apps/mail-ngrx/mail.component';\nimport { MailNgrxListComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list.component';\nimport { MailNgrxListItemComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component';\nimport { MailNgrxDetailsComponent } from 'app/main/apps/mail-ngrx/mail-details/mail-details.component';\nimport { MailNgrxMainSidebarComponent } from 'app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component';\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\nconst routes: Routes = [\n    {\n        path       : 'label/:labelHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'label/:labelHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'filter/:filterHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'filter/:filterHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : ':folderHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : ':folderHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path      : '**',\n        redirectTo: 'inbox'\n    }\n];\n\n@NgModule({\n    declarations   : [\n        MailNgrxComponent,\n        MailNgrxListComponent,\n        MailNgrxListItemComponent,\n        MailNgrxDetailsComponent,\n        MailNgrxMainSidebarComponent,\n        MailNgrxComposeDialogComponent\n    ],\n    imports        : [\n        RouterModule.forChild(routes),\n\n        MatButtonModule,\n        MatCheckboxModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatMenuModule,\n        MatRippleModule,\n        MatSelectModule,\n        MatToolbarModule,\n\n        TranslateModule,\n\n        FuseSharedModule,\n        FuseSidebarModule,\n\n        MailNgrxStoreModule\n    ],\n    providers      : [\n        MailNgrxService,\n        fromGuards.ResolveGuard\n    ],\n    entryComponents: [MailNgrxComposeDialogComponent]\n})\nexport class MailNgrxModule\n{\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\nimport { getFiltersArr, getFoldersArr, getLabelsArr, getMailsArr } from 'app/main/apps/mail-ngrx/store/selectors';\n\n@Injectable()\nexport class MailNgrxService\n{\n    foldersArr: any;\n    filtersArr: any;\n    labelsArr: any;\n    selectedMails: Mail[];\n    mails: Mail[];\n\n    /**\n     * Constructor\n     *\n     * @param {HttpClient} _httpClient\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _httpClient: HttpClient,\n        private _store: Store<MailAppState>\n    )\n    {\n        this._store\n            .pipe(select(getFoldersArr))\n            .subscribe(folders => {\n                this.foldersArr = folders;\n            });\n\n        this._store\n            .pipe(select(getFiltersArr))\n            .subscribe(filters => {\n                this.filtersArr = filters;\n            });\n\n        this._store\n            .pipe(select(getLabelsArr))\n            .subscribe(labels => {\n                this.labelsArr = labels;\n            });\n\n        this._store\n            .pipe(select(getMailsArr))\n            .subscribe(mails => {\n                this.mails = mails;\n            });\n\n        this.selectedMails = [];\n    }\n\n    /**\n     * Get all mails\n     *\n     * @returns {Observable<Mail[]>}\n     */\n    getAllMails(): Observable<Mail[]>\n    {\n        return this._httpClient.get<Mail[]>('api/mail-mails');\n    }\n\n    /**\n     * Get folders\n     *\n     * @returns {Observable<any>}\n     */\n    getFolders(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-folders');\n    }\n\n    /**\n     * Get filters\n     *\n     * @returns {Observable<any>}\n     */\n    getFilters(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-filters');\n    }\n\n    /**\n     * Get labels\n     *\n     * @returns {Observable<any>}\n     */\n    getLabels(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-labels');\n    }\n\n    /**\n     * Get mails\n     *\n     * @param handle\n     * @returns {Observable<Mail[]>}\n     */\n    getMails(handle): Observable<Mail[]>\n    {\n        if ( handle.id === 'labelHandle' )\n        {\n            const labelId = this.labelsArr.find(label => label.handle === handle.value).id;\n            return this._httpClient.get<Mail[]>('api/mail-mails?labels=' + labelId);\n        }\n        else if ( handle.id === 'filterHandle' )\n        {\n            return this._httpClient.get<Mail[]>('api/mail-mails?' + handle.value + '=true');\n        }\n        else // folderHandle\n        {\n            const folderId = this.foldersArr.find(folder => folder.handle === handle.value).id;\n            return this._httpClient.get<any>('api/mail-mails?folder=' + folderId);\n        }\n    }\n\n    /**\n     * Update the mail\n     *\n     * @param mail\n     * @returns {Promise<any>}\n     */\n    updateMail(mail): any\n    {\n        return this._httpClient.post('api/mail-mails/' + mail.id, {...mail});\n    }\n}\n","module.exports = \"<!-- SIDEBAR HEADER -->\\n<div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-between start\\\"\\n     class=\\\"header accent p-24 pb-4\\\">\\n\\n    <div class=\\\"logo\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n        <mat-icon class=\\\"logo-icon s-32\\\">mail</mat-icon>\\n        <span class=\\\"logo-text\\\">Mailbox Ngrx</span>\\n    </div>\\n\\n    <div class=\\\"account\\\" fxLayout=\\\"column\\\">\\n        <div class=\\\"title\\\">John Doe</div>\\n        <mat-form-field floatLabel=\\\"never\\\">\\n            <mat-select class=\\\"account-selection\\\" placeholder=\\\"Mail Selection\\\"\\n                        [ngModel]=\\\"selectedAccount\\\">\\n                <mat-option *ngFor=\\\"let account of (accounts | keys)\\\" [value]=\\\"account.key\\\">\\n                    {{account.value}}\\n                </mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n    </div>\\n\\n</div>\\n<!-- / SIDEBAR HEADER -->\\n\\n<!-- SIDEBAR CONTENT -->\\n<div class=\\\"content\\\" fusePerfectScrollbar>\\n\\n    <div class=\\\"p-24\\\">\\n        <button mat-raised-button\\n                class=\\\"mat-accent compose-dialog-button w-100-p\\\"\\n                (click)=\\\"composeDialog()\\\"\\n                aria-label=\\\"Compose\\\">\\n            {{ 'MAIL.COMPOSE' | translate }}\\n        </button>\\n    </div>\\n\\n    <div class=\\\"nav\\\">\\n\\n        <div class=\\\"nav-subheader\\\">{{ 'MAIL.FOLDERS' | translate }}</div>\\n\\n        <div class=\\\"nav-item\\\" *ngFor=\\\"let folder of (folders$ | async)\\\">\\n            <a class=\\\"nav-link\\\" matRipple [routerLink]=\\\"'/apps/mail-ngrx/' + folder.handle\\\"\\n               [routerLinkActive]=\\\"['active', 'accent']\\\">\\n                <mat-icon class=\\\"nav-link-icon\\\" *ngIf=\\\"folder.icon\\\">{{folder.icon}}</mat-icon>\\n                <span>{{folder.title}}</span>\\n            </a>\\n        </div>\\n\\n        <div class=\\\"nav-subheader\\\">{{ 'MAIL.FILTERS' | translate }}</div>\\n\\n        <div class=\\\"nav-item\\\" *ngFor=\\\"let filter of (filters$ | async)\\\">\\n            <a class=\\\"nav-link\\\" matRipple [routerLink]=\\\"'/apps/mail-ngrx/filter/' + filter.handle\\\"\\n               [routerLinkActive]=\\\"['active', 'accent']\\\">\\n                <mat-icon class=\\\"nav-link-icon\\\" [ngClass]=\\\"filter.color\\\" *ngIf=\\\"filter.icon\\\">{{filter.icon}}</mat-icon>\\n                <span>{{filter.title}}</span>\\n            </a>\\n        </div>\\n\\n        <div class=\\\"nav-subheader\\\">{{ 'MAIL.LABELS' | translate }}</div>\\n\\n        <div class=\\\"nav-item\\\" *ngFor=\\\"let label of (labels$ | async)\\\">\\n            <a class=\\\"nav-link\\\" matRipple [routerLink]=\\\"'/apps/mail-ngrx/label/' + label.handle\\\"\\n               [routerLinkActive]=\\\"['active', 'accent']\\\">\\n                <mat-icon class=\\\"nav-link-icon\\\" [ngStyle]=\\\"{'color':label.color}\\\">label</mat-icon>\\n                <span>{{label.title}}</span>\\n            </a>\\n        </div>\\n\\n    </div>\\n\\n</div>\\n<!-- / SIDEBAR CONTENT -->\\n\"","module.exports = \"mail-ngrx-main-sidebar {\\n  display: flex;\\n  flex: 1 0 auto;\\n  flex-direction: column;\\n  height: 100%; }\\n  mail-ngrx-main-sidebar .header .logo .logo-icon {\\n    margin: 0 16px 0 0; }\\n  mail-ngrx-main-sidebar .header .logo .logo-text {\\n    font-size: 24px;\\n    line-height: 24px; }\\n  mail-ngrx-main-sidebar .header .account {\\n    width: 100%; }\\n\"","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { FormGroup } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\n\n@Component({\n    selector       : 'mail-ngrx-main-sidebar',\n    templateUrl    : './main-sidebar.component.html',\n    styleUrls      : ['./main-sidebar.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxMainSidebarComponent\n{\n    labels: any[];\n    accounts: object;\n    selectedAccount: string;\n    dialogRef: any;\n\n    folders$: Observable<any>;\n    filters$: Observable<any>;\n    labels$: Observable<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {MatDialog} _matDialog\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _mailNgrxService: MailNgrxService,\n        private _matDialog: MatDialog,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.accounts = {\n            'creapond'    : 'johndoe@creapond.com',\n            'withinpixels': 'johndoe@withinpixels.com'\n        };\n        this.selectedAccount = 'creapond';\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\n        this.filters$ = this._store.pipe(select(fromStore.getFiltersArr));\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Compose dialog\n     */\n    composeDialog(): void\n    {\n        this.dialogRef = this._matDialog.open(MailNgrxComposeDialogComponent, {\n            panelClass: 'mail-ngrx-compose-dialog'\n        });\n\n        this.dialogRef.afterClosed()\n            .subscribe(response => {\n                if ( !response )\n                {\n                    return;\n                }\n                const actionType: string = response[0];\n                const formData: FormGroup = response[1];\n                switch ( actionType )\n                {\n                    /**\n                     * Send\n                     */\n                    case 'send':\n                        console.log('new Mail', formData.getRawValue());\n                        break;\n                    /**\n                     * Delete\n                     */\n                    case 'delete':\n                        console.log('delete Mail');\n                        break;\n                }\n            });\n    }\n}\n","import { Action } from '@ngrx/store';\n\nexport const GET_FILTERS = '[FILTERS] GET FILTERS';\nexport const GET_FILTERS_SUCCESS = '[FILTERS] GET FILTERS SUCCESS';\nexport const GET_FILTERS_FAILED = '[FILTERS] GET FILTERS FAILED';\n\n/**\n * Get Filters\n */\nexport class GetFilters implements Action\n{\n    readonly type = GET_FILTERS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Filters Success\n */\nexport class GetFiltersSuccess implements Action\n{\n    readonly type = GET_FILTERS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Filters Failed\n */\nexport class GetFiltersFailed implements Action\n{\n    readonly type = GET_FILTERS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type FiltersActionsAll\n    = GetFilters\n    | GetFiltersSuccess\n    | GetFiltersFailed;\n","import { Action } from '@ngrx/store';\n\nexport const GET_FOLDERS = '[FOLDERS] GET FOLDERS';\nexport const GET_FOLDERS_SUCCESS = '[FOLDERS] GET FOLDERS SUCCESS';\nexport const GET_FOLDERS_FAILED = '[FOLDERS] GET FOLDERS FAILED';\n\n/**\n * Get Folders\n */\nexport class GetFolders implements Action\n{\n    readonly type = GET_FOLDERS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Folders Success\n */\nexport class GetFoldersSuccess implements Action\n{\n    readonly type = GET_FOLDERS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Folders Failed\n */\nexport class GetFoldersFailed implements Action\n{\n    readonly type = GET_FOLDERS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type FoldersActionsAll\n    = GetFolders\n    | GetFoldersSuccess\n    | GetFoldersFailed;\n","export * from './mails.actions';\nexport * from './folders.actions';\nexport * from './filters.actions';\nexport * from './labels.actions';\n","import { Action } from '@ngrx/store';\n\nexport const GET_LABELS = '[LABELS] GET LABELS';\nexport const GET_LABELS_SUCCESS = '[LABELS] GET LABELS SUCCESS';\nexport const GET_LABELS_FAILED = '[LABELS] GET LABELS FAILED';\n\n/**\n * Get Labels\n */\nexport class GetLabels implements Action\n{\n    readonly type = GET_LABELS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Labels Success\n */\nexport class GetLabelsSuccess implements Action\n{\n    readonly type = GET_LABELS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Labels Failed\n */\nexport class GetLabelsFailed implements Action\n{\n    readonly type = GET_LABELS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type LabelsActionsAll\n    = GetLabels\n    | GetLabelsSuccess\n    | GetLabelsFailed;\n","import { Action } from '@ngrx/store';\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\n\nexport const GET_MAILS = '[MAILS] GET MAILS';\nexport const GET_MAILS_SUCCESS = '[MAILS] GET MAILS SUCCESS';\nexport const GET_MAILS_FAILED = '[MAILS] GET MAILS FAILED';\nexport const SET_CURRENT_MAIL = '[MAILS] SET CURRENT MAIL';\nexport const SET_CURRENT_MAIL_SUCCESS = '[MAILS] SET CURRENT MAIL SUCCESS';\nexport const CHECK_CURRENT_MAIL = '[MAILS] CHECK CURRENT MAIL';\nexport const UPDATE_MAIL = '[MAILS] UPDATE MAIL';\nexport const UPDATE_MAIL_SUCCESS = '[MAILS] UPDATE MAIL SUCCESS';\nexport const UPDATE_MAILS = '[MAILS] UPDATE MAILS';\nexport const UPDATE_MAILS_SUCCESS = '[MAILS] UPDATE MAILS SUCCESS';\nexport const SET_SEARCH_TEXT = '[MAILS] SET SEARCH TEXT';\nexport const SELECT_ALL_MAILS = '[MAILS] SELECT ALL MAILS';\nexport const DESELECT_ALL_MAILS = '[MAILS] DESELECT ALL MAILS';\nexport const TOGGLE_IN_SELECTED_MAILS = '[MAILS] TOGGLE IN SELECTED MAILS';\nexport const SELECT_MAILS_BY_PARAMETER = '[MAILS] SELECT MAILS BY PARAMETER';\nexport const SET_FOLDER_ON_SELECTED_MAILS = '[MAILS] SET FOLDER ON SELECTED MAILS';\nexport const ADD_LABEL_ON_SELECTED_MAILS = '[MAILS] ADD LABEL ON SELECTED MAILS';\n\n/**\n * Get Mails\n */\nexport class GetMails implements Action\n{\n    readonly type = GET_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Get Mails Success\n */\nexport class GetMailsSuccess implements Action\n{\n    readonly type = GET_MAILS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Mails Failed\n */\nexport class GetMailsFailed implements Action\n{\n    readonly type = GET_MAILS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Set Current Mail\n */\nexport class SetCurrentMail implements Action\n{\n    readonly type = SET_CURRENT_MAIL;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Set Current Mail Success\n */\nexport class SetCurrentMailSuccess implements Action\n{\n    readonly type = SET_CURRENT_MAIL_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Check Current Mail\n */\nexport class CheckCurrentMail implements Action\n{\n    readonly type = CHECK_CURRENT_MAIL;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Update Mail\n */\nexport class UpdateMail implements Action\n{\n    readonly type = UPDATE_MAIL;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Update Mail Success\n */\nexport class UpdateMailSuccess implements Action\n{\n    readonly type = UPDATE_MAIL_SUCCESS;\n\n    constructor(public payload: Mail)\n    {\n    }\n}\n\n/**\n * Update Mails\n */\nexport class UpdateMails implements Action\n{\n    readonly type = UPDATE_MAILS;\n\n    constructor(public payload: Mail[])\n    {\n    }\n}\n\n/**\n * Update Mails Success\n */\nexport class UpdateMailsSuccess implements Action\n{\n    readonly type = UPDATE_MAILS_SUCCESS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Set Search Text\n */\nexport class SetSearchText implements Action\n{\n    readonly type = SET_SEARCH_TEXT;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Select All Mails\n */\nexport class SelectAllMails implements Action\n{\n    readonly type = SELECT_ALL_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Deselect All Mails\n */\nexport class DeselectAllMails implements Action\n{\n    readonly type = DESELECT_ALL_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Toggle In Selected Mails\n */\nexport class ToggleInSelectedMails implements Action\n{\n    readonly type = TOGGLE_IN_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Select Mails by Parameter\n */\nexport class SelectMailsByParameter implements Action\n{\n    readonly type = SELECT_MAILS_BY_PARAMETER;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Set Folder on Selected Mails\n */\nexport class SetFolderOnSelectedMails implements Action\n{\n    readonly type = SET_FOLDER_ON_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Add label on Selected Mails\n */\nexport class AddLabelOnSelectedMails implements Action\n{\n    readonly type = ADD_LABEL_ON_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type MailsActionsAll\n    = GetMails\n    | GetMailsSuccess\n    | GetMailsFailed\n    | SetCurrentMail\n    | SetCurrentMailSuccess\n    | CheckCurrentMail\n    | UpdateMail\n    | UpdateMailSuccess\n    | UpdateMails\n    | UpdateMailsSuccess\n    | SetSearchText\n    | SelectAllMails\n    | DeselectAllMails\n    | ToggleInSelectedMails\n    | SelectMailsByParameter\n    | SetFolderOnSelectedMails\n    | AddLabelOnSelectedMails;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class FiltersEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get filters from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getFilters: Observable<FiltersActions.FiltersActionsAll> =\n        this.actions\n            .pipe(\n                ofType<FiltersActions.GetFilters>(FiltersActions.GET_FILTERS),\n                switchMap((action) => {\n                        return this.mailService.getFilters()\n                                   .pipe(\n                                       map((filters: any) => {\n                                           return new FiltersActions.GetFiltersSuccess(filters);\n                                       }),\n                                       catchError(err => of(new FiltersActions.GetFiltersFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class FoldersEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get Folders from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getFolders: Observable<FoldersActions.FoldersActionsAll> =\n        this.actions\n            .pipe(\n                ofType<FoldersActions.GetFolders>(FoldersActions.GET_FOLDERS),\n                switchMap((action) => {\n                        return this.mailService.getFolders()\n                                   .pipe(\n                                       map((folders: any) => {\n                                           return new FoldersActions.GetFoldersSuccess(folders);\n                                       }),\n                                       catchError(err => of(new FoldersActions.GetFoldersFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { MailsEffect } from './mails.effects';\nimport { FoldersEffect } from './folders.effects';\nimport { FiltersEffect } from './filters.effects';\nimport { LabelsEffect } from './labels.effects';\n\nexport const effects = [\n    MailsEffect,\n    FoldersEffect,\n    FiltersEffect,\n    LabelsEffect\n];\n\nexport * from './mails.effects';\nexport * from './folders.effects';\nexport * from './filters.effects';\nexport * from './labels.effects';\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as LabelsActions from '../actions/labels.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class LabelsEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get Labels from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getLabels: Observable<LabelsActions.LabelsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<LabelsActions.GetLabels>(LabelsActions.GET_LABELS),\n                switchMap((action) => {\n                        return this.mailService.getLabels()\n                                   .pipe(\n                                       map((labels: any) => {\n                                           return new LabelsActions.GetLabelsSuccess(labels);\n                                       }),\n                                       catchError(err => of(new LabelsActions.GetLabelsFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { catchError, debounceTime, map, mergeMap, exhaustMap, withLatestFrom } from 'rxjs/operators';\n\nimport { getRouterState, State } from 'app/store/reducers';\nimport { getMailsState } from 'app/main/apps/mail-ngrx/store/selectors';\nimport * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\nimport * as fromRoot from 'app/store';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class MailsEffect\n{\n    routerState: any;\n\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService,\n        private store: Store<State>\n    )\n    {\n        this.store\n            .pipe(select(getRouterState))\n            .subscribe(routerState => {\n                if ( routerState )\n                {\n                    this.routerState = routerState.state;\n                }\n            });\n    }\n\n    /**\n     * Get Mails with router parameters\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.GetMails>(MailsActions.GET_MAILS),\n                exhaustMap((action) => {\n\n                    let handle = {\n                        id   : '',\n                        value: ''\n                    };\n\n                    const routeParams = of('labelHandle', 'filterHandle', 'folderHandle');\n                    routeParams.subscribe(param => {\n                        if ( this.routerState.params[param] )\n                        {\n                            handle = {\n                                id   : param,\n                                value: this.routerState.params[param]\n                            };\n                        }\n                    });\n\n                    return this.mailService.getMails(handle)\n                               .pipe(\n                                   map((mails: Mail[]) => {\n\n                                       return new MailsActions.GetMailsSuccess({\n                                           loaded: handle,\n                                           mails : mails\n                                       });\n                                   }),\n                                   catchError(err => of(new MailsActions.GetMailsFailed(err)))\n                               );\n                })\n            );\n\n    /**\n     * Update Mail\n     * @type {Observable<any>}\n     */\n    @Effect()\n    updateMail: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMail>(MailsActions.UPDATE_MAIL),\n                exhaustMap((action) => {\n                    return this.mailService.updateMail(action.payload).pipe(\n                        map(() => {\n                            return new MailsActions.UpdateMailSuccess(action.payload);\n                        })\n                    );\n                })\n            );\n\n    /**\n     * UpdateMails\n     * @type {Observable<any>}\n     */\n    @Effect()\n    updateMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMails>(MailsActions.UPDATE_MAILS),\n                exhaustMap((action) => {\n                    return forkJoin(action.payload.map(mail => this.mailService.updateMail(mail))).pipe(map(() => {\n                        return new MailsActions.UpdateMailsSuccess();\n                    }));\n                })\n            );\n\n    /**\n     * Set Current Mail\n     * @type {Observable<SetCurrentMailSuccess>}\n     */\n    @Effect()\n    setCurrentMail: Observable<Action> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.SetCurrentMail>(MailsActions.SET_CURRENT_MAIL),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[action.payload]);\n                })\n            );\n\n    /**\n     * Check Current Mail\n     * Navigate to parent directory if not exist in mail list\n     * Update Current Mail if exist in mail list\n     * @type {Observable<any>}\n     */\n    @Effect()\n    checkCurrentMail: Observable<Action> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.CheckCurrentMail>(MailsActions.CHECK_CURRENT_MAIL),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n\n                    if ( !state.entities[this.routerState.params.mailId] )\n                    {\n                        return new fromRoot.Go({path: [this.routerState.url.replace(this.routerState.params.mailId, '')]});\n                    }\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[this.routerState.params.mailId]);\n                })\n            );\n\n    /**\n     * On Get Mails Success\n     * @type {Observable<CheckCurrentMail>}\n     */\n    @Effect()\n    getMailsSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.GetMailsSuccess>(MailsActions.GET_MAILS_SUCCESS),\n                mergeMap(() =>\n                    [\n                        new MailsActions.CheckCurrentMail()\n                    ])\n            );\n    /**\n     * On Update Mails Success\n     * @type {Observable<DeselectAllMails | GetMails>}\n     */\n    @Effect()\n    updateMailsSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMailsSuccess>(MailsActions.UPDATE_MAILS_SUCCESS),\n                mergeMap(() =>\n                    [\n                        new MailsActions.DeselectAllMails(),\n                        new MailsActions.GetMails()\n                    ])\n            );\n    /**\n     * On Update Mail Success\n     * @type {Observable<GetMails>}\n     */\n    @Effect()\n    updateMailSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMailSuccess>(MailsActions.UPDATE_MAIL_SUCCESS),\n                debounceTime(500),\n                map(() => {\n                    return new MailsActions.GetMails();\n                })\n            );\n\n    /**\n     * Set Folder on Selected Mails\n     * @type {Observable<UpdateMails>}\n     */\n    @Effect()\n    setFolderOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.SetFolderOnSelectedMails>(MailsActions.SET_FOLDER_ON_SELECTED_MAILS),\n                withLatestFrom(\n                    this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n                    const entities = {...state.entities};\n                    let mailsToUpdate = [];\n                    state.selectedMailIds\n                         .map(id => {\n                             mailsToUpdate = [\n                                 ...mailsToUpdate,\n                                 entities[id] = {\n                                     ...entities[id],\n                                     folder: action.payload\n                                 }\n                             ];\n                         });\n                    return new MailsActions.UpdateMails(mailsToUpdate);\n                })\n            );\n\n    /**\n     * Add Label on Selected Mails\n     * @type {Observable<UpdateMails>}\n     */\n    @Effect()\n    addLabelOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.AddLabelOnSelectedMails>(MailsActions.ADD_LABEL_ON_SELECTED_MAILS),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n\n                    const entities = {...state.entities};\n                    let mailsToUpdate = [];\n\n                    state.selectedMailIds\n                         .map(id => {\n\n                             let labels = [...entities[id].labels];\n\n                             if ( !entities[id].labels.includes(action.payload) )\n                             {\n                                 labels = [...labels, action.payload];\n                             }\n\n                             mailsToUpdate = [\n                                 ...mailsToUpdate,\n                                 entities[id] = {\n                                     ...entities[id],\n                                     labels\n                                 }\n                             ];\n                         });\n\n                    return new MailsActions.UpdateMails(mailsToUpdate);\n                })\n            );\n}\n","export * from './resolve.guard';\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { RouterStateSnapshot } from '@angular/router/src/router_state';\nimport { select, Store } from '@ngrx/store';\n\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, switchMap, catchError, tap, take, filter } from 'rxjs/operators';\n\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { getFiltersLoaded, getFoldersLoaded, getLabelsLoaded, getMailsLoaded } from 'app/main/apps/mail-ngrx/store/selectors';\nimport { getRouterState } from 'app/store/reducers';\n\n@Injectable()\nexport class ResolveGuard implements CanActivate\n{\n    routerState: any;\n\n    /**\n     * Constructor\n     *\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _store: Store<MailAppState>\n    )\n    {\n        this._store\n            .pipe(select(getRouterState))\n            .subscribe(routerState => {\n                if ( routerState )\n                {\n                    this.routerState = routerState.state;\n                }\n            });\n    }\n\n    /**\n     * Can activate\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns {Observable<boolean>}\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>\n    {\n        return this.checkStore().pipe(\n            switchMap(() => of(true)),\n            catchError(() => of(false))\n        );\n    }\n\n    /**\n     * Check store\n     *\n     * @returns {Observable<any>}\n     */\n    checkStore(): Observable<any>\n    {\n        return forkJoin(\n            this.getFolders(),\n            this.getFilters(),\n            this.getLabels()\n        ).pipe(\n            filter(([foldersLoaded, filtersLoaded, labelsLoaded]) => !!(foldersLoaded && filtersLoaded && labelsLoaded)),\n            take(1),\n            switchMap(() =>\n                this.getMails()\n            ),\n            take(1),\n            map(() => this._store.dispatch(new fromStore.SetCurrentMail(this.routerState.params.mailId)))\n        );\n    }\n\n    /**\n     * Get folders\n     *\n     * @returns {Observable<any>}\n     */\n    getFolders(): any\n    {\n        return this._store.pipe(\n            select(getFoldersLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetFolders([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Filters\n     *\n     * @returns {Observable<any>}\n     */\n    getFilters(): any\n    {\n        return this._store.pipe(\n            select(getFiltersLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetFilters([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Labels\n     * @returns {Observable<any>}\n     */\n    getLabels(): any\n    {\n        return this._store.pipe(\n            select(getLabelsLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetLabels([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Mails\n     *\n     * @returns {Observable<any>}\n     */\n    getMails(): any\n    {\n        return this._store.pipe(\n            select(getMailsLoaded),\n            tap((loaded: any) => {\n\n                if ( !this.routerState.params[loaded.id] || this.routerState.params[loaded.id] !== loaded.value )\n                {\n                    this._store.dispatch(new fromStore.GetMails());\n                    this._store.dispatch(new fromStore.SetSearchText(''));\n                    this._store.dispatch(new fromStore.DeselectAllMails());\n                }\n            }),\n            filter((loaded: any) => {\n                return this.routerState.params[loaded.id] && this.routerState.params[loaded.id] === loaded.value;\n            }),\n            take(1)\n        );\n    }\n}\n","export * from './actions';\nexport * from './reducers';\nexport * from './selectors';\nexport * from './effects';\n","import * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\n\nexport interface FiltersState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const FiltersInitialState: FiltersState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function FiltersReducer(state = FiltersInitialState, action: FiltersActions.FiltersActionsAll): FiltersState\n{\n    switch ( action.type )\n    {\n        case FiltersActions.GET_FILTERS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case FiltersActions.GET_FILTERS_SUCCESS:\n\n            const filters = action.payload;\n            const entities = filters.reduce(\n                (_entities: { [id: number]: any }, filter: any) => {\n                    return {\n                        ..._entities,\n                        [filter.id]: filter\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case FiltersActions.GET_FILTERS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\n\nexport interface FoldersState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const FoldersInitialState: FoldersState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function FoldersReducer(state = FoldersInitialState, action: FoldersActions.FoldersActionsAll): FoldersState\n{\n    switch ( action.type )\n    {\n        case FoldersActions.GET_FOLDERS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case FoldersActions.GET_FOLDERS_SUCCESS:\n\n            const folders = action.payload;\n            const entities = folders.reduce(\n                (_entities: { [id: number]: any }, folder: any) => {\n                    return {\n                        ..._entities,\n                        [folder.id]: folder\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case FoldersActions.GET_FOLDERS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store';\nimport { MailsReducer, MailsState } from './mails.reducer';\nimport { FoldersReducer, FoldersState } from './folders.reducer';\nimport { FiltersReducer, FiltersState } from './filters.reducer';\nimport { LabelsReducer, LabelsState } from './labels.reducer';\n\nexport interface MailAppState\n{\n    mails: MailsState;\n    folders: FoldersState;\n    filters: FiltersState;\n    labels: LabelsState;\n}\n\nexport const getMailAppState = createFeatureSelector<MailAppState>(\n    'mail-app'\n);\n\nexport const getAppState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state\n);\n\nexport const reducers: ActionReducerMap<MailAppState> = {\n    mails  : MailsReducer,\n    folders: FoldersReducer,\n    filters: FiltersReducer,\n    labels : LabelsReducer\n};\n\nexport * from './mails.reducer';\nexport * from './folders.reducer';\nexport * from './filters.reducer';\nexport * from './labels.reducer';\n","import * as LabelsActions from 'app/main/apps/mail-ngrx/store/actions/labels.actions';\n\nexport interface LabelsState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const LabelsInitialState: LabelsState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function LabelsReducer(state = LabelsInitialState, action: LabelsActions.LabelsActionsAll): LabelsState\n{\n    switch ( action.type )\n    {\n        case LabelsActions.GET_LABELS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case LabelsActions.GET_LABELS_SUCCESS:\n\n            const labels = action.payload;\n            const entities = labels.reduce(\n                (_entities: { [id: number]: any }, label: any) => {\n                    return {\n                        ..._entities,\n                        [label.id]: label\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case LabelsActions.GET_LABELS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\n\nexport interface MailsState\n{\n    entities?: { [id: number]: Mail };\n    currentMail: any;\n    selectedMailIds: string[];\n    searchText: string;\n    loading: boolean;\n    loaded: any;\n}\n\nexport const MailsInitialState: MailsState = {\n    entities       : {},\n    currentMail    : null,\n    selectedMailIds: [],\n    searchText     : '',\n    loading        : false,\n    loaded         : false\n};\n\nexport function MailsReducer(state = MailsInitialState, action: MailsActions.MailsActionsAll): MailsState\n{\n    switch ( action.type )\n    {\n        case MailsActions.GET_MAILS:\n        {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n\n        case MailsActions.GET_MAILS_SUCCESS:\n        {\n\n            const mails = action.payload.mails;\n            const loaded = action.payload.loaded;\n            const entities = mails.reduce(\n                (_entities: { [id: number]: Mail }, mail: Mail) => {\n                    return {\n                        ..._entities,\n                        [mail.id]: mail\n                    };\n                }, {});\n\n            return {\n                ...state,\n                entities,\n                loading: false,\n                loaded\n            };\n        }\n\n        case MailsActions.GET_MAILS_FAILED:\n        {\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        }\n\n        case MailsActions.SET_CURRENT_MAIL_SUCCESS:\n        {\n            return {\n                ...state,\n                currentMail: action.payload\n            };\n        }\n\n        case MailsActions.UPDATE_MAIL_SUCCESS:\n        {\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    [action.payload.id]: action.payload\n                }\n            };\n        }\n\n        case MailsActions.SET_SEARCH_TEXT:\n        {\n\n            return {\n                ...state,\n                searchText: action.payload\n            };\n        }\n\n        case MailsActions.TOGGLE_IN_SELECTED_MAILS:\n        {\n\n            const mailId = action.payload;\n\n            let selectedMailIds = [...state.selectedMailIds];\n\n            if ( selectedMailIds.find(id => id === mailId) !== undefined )\n            {\n                selectedMailIds = selectedMailIds.filter(id => id !== mailId);\n            }\n            else\n            {\n                selectedMailIds = [...selectedMailIds, mailId];\n            }\n\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.SELECT_ALL_MAILS:\n        {\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\n\n            const selectedMailIds = arr.map(mail => mail.id);\n\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.DESELECT_ALL_MAILS:\n        {\n            return {\n                ...state,\n                selectedMailIds: []\n            };\n        }\n\n        case MailsActions.SELECT_MAILS_BY_PARAMETER:\n        {\n            const filter = action.payload;\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\n            const selectedMailIds = arr.filter(mail => mail[filter.parameter] === filter.value)\n                                       .map(mail => mail.id);\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.SET_FOLDER_ON_SELECTED_MAILS:\n        {\n            const entities = {...state.entities};\n\n            state.selectedMailIds.map(id => {\n                entities[id] = {\n                    ...entities[id],\n                    folder: action.payload\n                };\n            });\n\n            return {\n                ...state,\n                entities\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n","import { createSelector } from '@ngrx/store';\nimport { FiltersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getFiltersState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.filters\n);\n\nexport const getFilters = createSelector(\n    getFiltersState,\n    (state: FiltersState) => state.entities\n);\n\nexport const getFiltersLoaded = createSelector(\n    getFiltersState,\n    (state: FiltersState) => state.loaded\n);\n\nexport const getFiltersArr = createSelector(\n    getFilters,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","import { createSelector } from '@ngrx/store';\nimport { FoldersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getFoldersState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.folders\n);\n\nexport const getFolders = createSelector(\n    getFoldersState,\n    (state: FoldersState) => state.entities\n);\n\nexport const getFoldersLoaded = createSelector(\n    getFoldersState,\n    (state: FoldersState) => state.loaded\n);\n\nexport const getFoldersArr = createSelector(\n    getFolders,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","export * from './mails.selectors';\nexport * from './folders.selectors';\nexport * from './filters.selectors';\nexport * from './labels.selectors';\n","import { createSelector } from '@ngrx/store';\nimport { LabelsState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getLabelsState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.labels\n);\n\nexport const getLabels = createSelector(\n    getLabelsState,\n    (state: LabelsState) => state.entities\n);\n\nexport const getLabelsLoaded = createSelector(\n    getLabelsState,\n    (state: LabelsState) => state.loaded\n);\n\nexport const getLabelsArr = createSelector(\n    getLabels,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","import { FuseUtils } from '@fuse/utils';\n\nimport { createSelector } from '@ngrx/store';\nimport { getMailAppState, MailAppState, MailsState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getMailsState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.mails\n);\n\nexport const getMails = createSelector(\n    getMailsState,\n    (state: MailsState) => state.entities\n);\n\nexport const getMailsLoaded = createSelector(\n    getMailsState,\n    (state: MailsState) => state.loaded\n);\n\nexport const getSearchText = createSelector(\n    getMailsState,\n    (state: MailsState) => state.searchText\n);\n\nexport const getMailsArr = createSelector(\n    getMails,\n    getSearchText,\n    (entities, searchText) => {\n        const arr = Object.keys(entities).map((id) => entities[id]);\n        return FuseUtils.filterArrayByString(arr, searchText);\n    }\n);\n\nexport const getCurrentMail = createSelector(\n    getMailsState,\n    (state: MailsState) => state.currentMail\n);\n\nexport const getSelectedMailIds = createSelector(\n    getMailsState,\n    (state: MailsState) => state.selectedMailIds\n);\n","import { StoreModule } from '@ngrx/store';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers } from 'app/main/apps/mail-ngrx/store/reducers';\nimport { effects } from 'app/main/apps/mail-ngrx/store/effects';\n\n@NgModule({\n    imports  : [\n        StoreModule.forFeature('mail-app', reducers),\n        EffectsModule.forFeature(effects)\n    ],\n    providers: []\n})\nexport class MailNgrxStoreModule\n{\n}\n"],"sourceRoot":""}